package chapter4.graphs.impl;

import chapter1.fundamentals.api.Stack;
import chapter1.fundamentals.impl.SimpleStack;
import chapter4.graphs.api.Graph;
import chapter4.graphs.api.Paths;

import java.util.Arrays;

/**
 * DFS based implementation of Paths API
 * applicable both directed and undirected graph
 * quick-union algorithms are not capable of finding paths
 */
public class DepthFirstPaths extends Paths {

    // whether v is connected to s
    private boolean[] marked;
    // 'a path tree' generated by dfs
    // - index: vertex id
    // - value: last vertex on the path to this vertex
    private int[] edgeTo;

    public DepthFirstPaths(Graph G, int s) {
        super(G, s);
        marked = new boolean[G.V()];
        Arrays.fill(marked, false);
        edgeTo = new int[G.V()];
        Arrays.fill(edgeTo, 0);
        dfs(start);
    }

    public void dfs(int v) {
        marked[v] = true;
        for (int w : graph.adj(v))
            if (!marked[w]) {
                edgeTo[w] = v;
                dfs(w);
            }
    }

    @Override
    public boolean hasPathTo(int v) {
        return marked[v];
    }

    @Override
    public Iterable<Integer> pathTo(int v) {
        Stack<Integer> stack = new SimpleStack<>();
        while (v != start) {
            stack.push(v);
            v = edgeTo[v];
        }
        stack.push(start);
        //Stack implement Iterable interface
        return stack;
    }
}
